"""
Django settings for EOD_Test project.

Generated by 'django-admin startproject' using Django 2.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# !!!SECURITY WARNING: keep the secret key used in production secret!!!
SECRET_KEY = '3r8r7@-xf2*n=83@bb@9%t7+g#0*np&ujt+7$2%y5gfq48umv('

# SECURITY WARNING: don't run with debug turned on in production!
# Celery + Debug == Memory leaks. Redundant, but do NOT run this on prod with debug on
DEBUG = True

# Change this to "*" before deploying, otherwise only localhost can connect
ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',  # WhiteNoise. Serve static files without nginx/apache
    'django.contrib.staticfiles',
    'django_object_actions',  # Easily add object actions to the admin
    'django_celery_results',  # Used to persist Celery task results to Django DB
    'corsheaders',  # Cross site request security
    'django_extensions',  # Easy time stamping
    'crispy_forms',  # Easily add Bootstrap to our forms
    'channels',  # Django Channels for RT updates to page
    'user',  # Our user model
    'articles',  # Our article model
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # We need this for WhiteNoise to work
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Cross site request security
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Bootstrap Admin settings
# Disable the sidebar

BOOTSTRAP_ADMIN_SIDEBAR_MENU = False

# CORS whitelist
# Change this if you need to add a domain/IP to the whitelist
# Right now, its set to only accept from localhost

CORS_ORIGIN_WHITELIST = (
    'localhost:8000',
    '127.0.0.1:800',
)

ROOT_URLCONF = 'EOD_Test.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Need to tell Django where our templates are
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ASGI_APPLICATION = 'EOD_Test.routing.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'  # Set this to whatever the server's TZ is, this is same as Eastern TZ

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Celery settings
# This assumes you'll be running a RabbitMQ instance locally

CELERY_BROKER_URL = 'amqp://guest:guest@localhost//'  # Use guest account on broker
CELERY_ACCEPT_CONTENT = ['json']
CELERY_RESULT_BACKEND = 'django-db'  # Persist task results to DB, else, task results will expire on .get()
CELERY_TASK_SERIALIZER = 'json'

# Channels Settings
# Since we're already using RabbitMQ for Celery, we can use
# Channels to do live updates instead of polling

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'asgi_rabbitmq.RabbitmqChannelLayer',
        'CONFIG': {
            'hosts': 'amqp://guest:guest@localhost//',  # Set to your RabbitMQ instance,
        }
    }
}

# SMTP (outbound email) server settings
# Replace these values with your own

EMAIL_BACKEND = 'djcelery_email.backends.CeleryEmailBackend'
EMAIL_USE_TLS = True  # Most SMTP servers use TLS
EMAIL_HOST = 'SMTP_HOST'
EMAIL_PORT = 'SMTP_PORT'

EMAIL_HOST_USER = 'SMTP_USER'
EMAIL_HOST_PASSWORD = 'SMTP_PASSWORD'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

# Set our custom user model and where we send users after login

AUTH_USER_MODEL = 'user.UserModel'
LOGIN_REDIRECT_URL = 'home'

# Cache settings
# We're using local memory caching here, typically, we'd use memcached
# We don't define a location as we only need one cache

CACHES = {
    'default': {
        'BACKEND':
            'django.core.cache.backends.locmem.LocMemCache',
    }
}

# WhiteNoise Settings
# We need to set the static root first, and then enable caching and compression
# for our static files. We

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Crispy form settings
# Easy way to add bootstrap to all our forms

CRISPY_TEMPLATE_PACK = 'bootstrap4'
